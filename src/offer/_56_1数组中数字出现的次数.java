/**
 * 一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。
 * 请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。
 * 输入：nums = [4,1,4,6]
 * 输出：[1,6] 或 [6,1]
 * 解题思路：
 * 1.暴力解法：就使用HashMap保存出现次数。但是空间复杂度不符合要求
 * 2.使用位运算。假设两个数字为a， b
 *   首先一次遍历，进行异或操作，得到的sum就是a^b，因为出现两次的数字进行异或等于零。
 *   还有一个trick就是，m&-m 能够得到m中第一个为1的位置，（从低向高）
 *   因为数字在计算机中是以补码的形式储存的。
 *   比如数字6  0000 0110    -6的原码是  1000 0110 反码 1111 1001 补码 1111 1010
 *   6&-6的结果就是  0000 0010 也就是第一个出现1的位置。
 *   我们可以使用这个位置来将原数组分成两个部分：因为sum是a^b的异或，在sum & -sum第一个为1的位置上，ab一定不能同为1 或同为0
 *   使用异或操作，分成两部分，结果分别就是a，b。
 */
class Solution {
    public int[] singleNumbers(int[] nums) {
        int sum = 0;
        for (int num: nums){
            sum ^= num;
        }
        int a = 0, b = 0;
        int k = sum & (-sum);
        for (int num: nums){
            if ((num & k) == k){
                a ^= num;
            }
            else{
                b ^= num;
            }
        }
        return new int[]{a, b};
    }
}