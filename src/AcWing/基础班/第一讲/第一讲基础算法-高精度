### 高精度

#### 高精度加法
#### 题目描述
给定两个正整数，计算它们的和。

输入格式
共两行，每行包含一个整数。

输出格式
共一行，包含所求的和。

数据范围
1≤整数长度≤100000
输入样例：
12
23
输出样例：
35

#### 解题思路
只有cpp会考察的内容，因为java中有大整数类，python默认数值是无限的。

一般会考察四种：

- A + B
- A - B
- A * b
- A / b 

其中大写A B位数小于1e6  a数值一般小于1e9

- 大整数的存储：大整数在cpp中使用数组来保存的，个位到高位一次存到数组中。
- 模拟人工计算过程

#### 代码
    
    #include <iostream>
    #include <vector>
    
    using namespace std;
    
    const int N = 1e+6 + 10;
    
    
    vector<int> add(vector<int> &A, vector<int> &B){
        vector<int> C;
        int t = 0;
        for (int i = 0; i < A.size() || i < B.size(); i ++){
            if (i < A.size()) t += A[i];
            if (i < B.size()) t += B[i];
            C.push_back(t % 10);
            t = t / 10;
        }
        if (t) C.push_back(1);
        return C;
    }
    
    
    int main(){
        string a, b;
        cin >> a >> b;
        
        vector<int> A, B;
        
        for (int i = a.size() - 1; i >= 0; i --){
            A.push_back(a[i] - '0');
        }
        
        for (int i = b.size() - 1; i >= 0; i --){
            B.push_back(b[i] - '0');
        }
        
        auto C = add(A, B);
        
        for (int i = C.size()- 1; i >= 0; i --){
            printf("%d", C[i]);
        }
        
        return 0;
    }

#### 高精度减法 
#### 问题描述
给定两个正整数，计算它们的差，计算结果可能为负数。

输入格式
共两行，每行包含一个整数。

输出格式
共一行，包含所求的差。

数据范围

    1≤整数长度≤105

输入样例：

    32
    11

输出样例：

    21

#### 解题思路

#### 代码

    #include <iostream>
    #include <vector>
    
    using namespace std;
    
    vector<int> A, B;
    
    
    // 比较A，B的大小  使得计算sub的时候 保证是 大数 - 小数
    bool cmp(vector<int> &A, vector<int> &B){
        // 自己写的cmp好蠢，一点都不简洁
        // if (A.size() > B.size()) {
        //     return true;
        // }
        // else if (A.size() == B.size()){
        //     int length = A.size() - 1;
        //     while(length >= 0){
        //         if (A[length] > B[length]){
        //             return true;
        //         }
        //         else if (A[length] == B[length]){
        //             length --;
        //         }
        //         else{
        //             return false;
        //         }
        //     }
        // }
        // else {
        //     return false;
        // }
        if (A.size() != B.size()) return A.size() > B.size();
        
        for (int i = A.size() - 1; i >= 0; i --){
            if (A[i] != B[i]) return A[i] > B[i];
        }
        
        return true;
        
    }
    
    vector<int> sub(vector<int> &A, vector<int> &B){
        vector<int> C;
        // 处理A - B
        // 使用t来保存计算结果和借位信息
        for (int i = 0, t = 0; i < A.size(); i ++){
            t = A[i] - t;
            if (i < B.size()) t -= B[i];
            C.push_back((t + 10) % 10);
            if (t < 0) t = 1;
            else t = 0;
        }
        // 弹出多余的前导0
        while (C.size() > 1 && C.back() == 0) C.pop_back();
        return C;
    }
    
    int main(){
        string a, b;
        cin >> a >> b;
        
        for (int i = a.size() - 1; i >= 0; i --) A.push_back(a[i] - '0');
        for (int i = b.size() - 1; i >= 0; i --) B.push_back(b[i] - '0');
        
        vector<int> C;
        if (cmp(A, B)) C = sub(A, B);
        else {
            C = sub(B, A);
            cout << "-";
        }
        
        for (int i = C.size() - 1; i >= 0; i --) printf("%d", C[i]);
        cout << endl;
        return 0;
    }
    
#### 高精度乘法
#### 问题描述
给定两个正整数A和B，请你计算A * B的值。

输入格式
共两行，第一行包含整数A，第二行包含整数B。

输出格式
共一行，包含A * B的值。

数据范围

    1≤A的长度≤100000,
    0≤B≤10000

输入样例：

    2
    3

输出样例：

    6

#### 解题思路


#### 代码
    #include <iostream>
    #include <vector>
    
    using namespace std;
    
    vector<int> mul(vector<int> &A, int b)
    {
        vector<int> C;
    
        int t = 0
        // A的每一位和b相乘，使用t保存结果
        for (int i = 0; i < A.size() || t; i ++ )
        {
            if (i < A.size()) t += A[i] * b;
            // 这里保存结果
            C.push_back(t % 10);
            t /= 10;
        }
    
        while (C.size() > 1 && C.back() == 0) C.pop_back();
    
        return C;
    }
    
    
    int main(){
        string a;
        int b;
        cin >> a >> b;
        
        vector<int> A, B;
        
        for (int i = a.size() - 1; i >= 0; i --){
            A.push_back(a[i] - '0');
        }
        
        
        auto C = mul(A, b);
        
        for (int i = C.size()- 1; i >= 0; i --){
            printf("%d", C[i]);
        }
        
        return 0;
    }

#### 高精度除法
#### 问题描述
给定两个非负整数A，B，请你计算 A / B的商和余数。

输入格式
共两行，第一行包含整数A，第二行包含整数B。

输出格式
共两行，第一行输出所求的商，第二行输出所求余数。

数据范围

    1≤A的长度≤100000,
    1≤B≤10000
    B 一定不为0

输入样例：

    7
    2

输出样例：

    3
    1

#### 解题思路


#### 代码
    #include <iostream>
    #include <vector>
    #include <algorithm>
    
    using namespace std;
    
    vector<int> div(vector<int> &A, int b, int &r)
    {
        vector<int> C;
        r = 0;
        for (int i = A.size() - 1; i >= 0; i -- )
        {
            r = r * 10 + A[i];
            C.push_back(r / b);
            r %= b;
        }
        reverse(C.begin(), C.end());
        while (C.size() > 1 && C.back() == 0) C.pop_back();
        return C;
    }
    
    int main()
    {
        string a;
        vector<int> A;
    
        int B;
        cin >> a >> B;
        for (int i = a.size() - 1; i >= 0; i -- ) A.push_back(a[i] - '0');
    
        int r;
        auto C = div(A, B, r);
    
        for (int i = C.size() - 1; i >= 0; i -- ) cout << C[i];
    
        cout << endl << r << endl;
    
        return 0;
    }