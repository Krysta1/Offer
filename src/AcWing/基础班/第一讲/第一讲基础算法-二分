### 数的范围
#### 题目描述
给定一个按照升序排列的长度为n的整数数组，以及 q 个查询。

对于每个查询，返回一个元素k的起始位置和终止位置（位置从0开始计数）。

如果数组中不存在该元素，则返回“-1 -1”。

输入格式
第一行包含整数n和q，表示数组长度和询问个数。

第二行包含n个整数（均在1~10000范围内），表示完整数组。

接下来q行，每行包含一个整数k，表示一个询问元素。

输出格式
共q行，每行包含两个整数，表示所求元素的起始位置和终止位置。

如果数组中不存在该元素，则返回“-1 -1”。

数据范围

    1≤n≤100000
    1≤q≤10000
    1≤k≤10000

输入样例：

    6 3
    1 2 2 3 3 4
    3
    4
    5
    
输出样例：

    3 4
    5 5
    -1 -1

#### 解题思路
二分的本质是边界并不是单调性。

找到一个性质，可以把一个区间一分为二，一半满足一半不满足。二分就可以寻找这个性质的边界。

两个模板：

    int bsearch_1(int l, int r){
        while(l < r){
            int mid = l + r >> 1;
            if (check(mid)) r = mid;
            else l = mid + 1;
        }
        return l;
    }
    
    int bsearch_2(int l, int r){
        while(l < r){
            int mid = l + r + 1 >> 1;
            if (check(mid)) l = mid;
            else r = mid - 1;
        }
        return l;
    }

如何选择两个模板：

- 先写出check函数
- 根据check函数确定更新区间，如果是l = mid，在计算mid时要记得+1 如果是r = mid，计算mid时不需要。

为什么要+1？

在l = r - 1的时候，如果不进行+1，mid = l + r >> 1 = l。在check结果为true的情况下，区间更新为l = mid = l，区间不发生变化，死循环了。

与单调性的关系：有单调性一定能够二分，但是使用二分的题目不一定有单调性。

#### 代码

    #include <iostream>
    
    using namespace std;
    
    const int N = 1000010;
    int n, m;
    int q[N];
    
    int main(){
        cin >> n >> m;
        for (int i = 0; i < n; i ++) cin >> q[i];
        
        while (m --){
            int x;
            cin >> x;
            // 先使用一个二分来确定左边界，左边界右面所有的元素都是 >= x的
            // 规则是q[mid] >= x -> r = mid
            int l = 0, r = n - 1;
            while (l < r){
                int mid = l + r >> 1;
                if (q[mid] >= x) r = mid;
                else l = mid + 1;
            }
            // 如果找到的这个边界值不等于 x 那就证明列表中没有x 直接输出-1 -1
            if (q[l] != x) cout <<"-1 -1"<< endl;
            else{
                // 如果存在的话，先输出左边界
                cout << l << " ";
                // 再用一个二分来确定右边界，右边界左面所有的元素都是 <= x的
                // 更新规则是 q[mid] <= x -> l = mid
                int l = 0, r = n - 1;
                while (l < r){
                    int mid = l + r + 1 >> 1;
                    if (q[mid] <= x) l = mid;
                    else r = mid - 1;
                }
                cout << l << endl;
            }
        }
        return 0;
    }
    
#### 数的三次方根
#### 问题描述
给定一个浮点数n，求它的三次方根。

输入格式
共一行，包含一个浮点数n。

输出格式
共一行，包含一个浮点数，表示问题的解。

注意，结果保留6位小数。

数据范围

    −10000≤n≤10000

输入样例：

    1000.00

输出样例：

    10.000000

#### 解题思路
使用浮点数二分，while循环里面要比保存的精度小一点 比如此题的1e-6 终止条件要设置为 r - l < 1e-8

同时跟整数二分时的模板不同的是，mid 使用 / 2，l r = mid 而不是mid + 1 和 mid - 1

#### 代码

    #include <iostream>
    
    using namespace std;
    
    double x;
    
    int main(){
        cin >> x;
        double l = -100, r = 100;
        while (r - l > 1e-8){
            double mid = (l + r) / 2;
            double res = mid * mid * mid;
            if (res >= x) r = mid;
            else l = mid;
        }
        
        printf("%.6lf", l);
    }
